#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#define ALPHABET_SIZE 26
char* encrypt(char* plaintext, char* key);
char* decrypt(char* ciphertext, char* key);

int main() {
    char plaintext[1000];
    char ciphertext[1000];
    char key[ALPHABET_SIZE + 1]; // +1 for null terminator
    
    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0'; // Remove trailing newline
    
    printf("Enter the key (26 characters, each exactly once): ");
    fgets(key, sizeof(key), stdin);
    key[strcspn(key, "\n")] = '\0'; // Remove trailing newline
    
    strcpy(ciphertext, encrypt(plaintext, key));
    printf("Encrypted text: %s\n", ciphertext);
    
    strcpy(plaintext, decrypt(ciphertext, key));
    printf("Decrypted text: %s\n", plaintext);
    
    return 0;
}
char* encrypt(char* plaintext, char* key) {
    int i;
    for(i = 0; plaintext[i] != '\0'; ++i) {
        if(isalpha(plaintext[i])) {
            if(islower(plaintext[i]))
                plaintext[i] = tolower(key[plaintext[i] - 'a']);
            else
                plaintext[i] = toupper(key[plaintext[i] - 'A']);
        }
    }
    return plaintext;
}
char* decrypt(char* ciphertext, char* key) {
    int i, j;
    for(i = 0; ciphertext[i] != '\0'; ++i) {
        if(isalpha(ciphertext[i])) {
            for(j = 0; j < ALPHABET_SIZE; ++j) {
                if(tolower(ciphertext[i]) == tolower(key[j])) {
                    if(islower(ciphertext[i]))
                        ciphertext[i] = 'a' + j;
                    else
                        ciphertext[i] = 'A' + j;
                    break;
                }
            }
        }
    }
    return ciphertext;
}
