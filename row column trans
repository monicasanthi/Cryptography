import math

def validate_key(key):
    return sorted(key) == [str(i) for i in range(1, len(key) + 1)]

def encrypt_columnar_transposition(plaintext, key):
    plaintext = plaintext.replace(" ", "").upper()
    if not validate_key(key):
        print("Invalid key. Key must contain unique digits from 1 to", len(key))
        return ""

    num_columns = len(key)
    num_rows = math.ceil(len(plaintext) / num_columns)
    num_padding = num_rows * num_columns - len(plaintext)
                           
    plaintext += '_' * num_padding
    grid = [[''] * num_columns for _ in range(num_rows)]

    index = 0
    for col in key:
        col_index = int(col) - 1
        for row in range(num_rows):
            grid[row][col_index] = plaintext[index]
            index += 1

    ciphertext = ''.join(''.join(row) for row in grid)
    return ciphertext

def decrypt_columnar_transposition(ciphertext, key):
    if not validate_key(key):
        print("Invalid key. Key must contain unique digits from 1 to", len(key))
        return ""

    num_columns = len(key)
    num_rows = math.ceil(len(ciphertext) / num_columns)
    grid = [[''] * num_columns for _ in range(num_rows)]
    index = 0
    for col in key:
        col_index = int(col) - 1
        for row in range(num_rows):
            grid[row][col_index] = ciphertext[index]
            index += 1
    plaintext = ''.join(''.join(row) for row in grid)
    return plaintext

plaintext = input("Enter plaintext: ")
key = input("Enter key (sequence of column numbers, e.g., '3124'): ")

ciphertext = encrypt_columnar_transposition(plaintext, key)
if ciphertext:
    print("Encrypted text:", ciphertext)

decrypted_text = decrypt_columnar_transposition(ciphertext, key)
if decrypted_text:
    print("Decrypted text:", decrypted_text)
